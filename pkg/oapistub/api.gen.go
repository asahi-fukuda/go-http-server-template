// Package oapistub provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package oapistub

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// エラー情報
type ErrorDescription map[string]interface{}

// Organization
type Organization struct {
	// Organization ID
	Id string `json:"id"`

	// Organization の名前
	Name string `json:"name"`
}

// OrganizationId defines model for organizationId.
type OrganizationId string

// ErrInternal defines model for ErrInternal.
type ErrInternal struct {
	// エラー情報
	Error ErrorDescription `json:"error"`
}

// ErrNotFound defines model for ErrNotFound.
type ErrNotFound struct {
	// エラー情報
	Error ErrorDescription `json:"error"`
}

// ErrUnauthorized defines model for ErrUnauthorized.
type ErrUnauthorized struct {
	// エラー情報
	Error ErrorDescription `json:"error"`
}

// Organization 取得の成功レスポンス
type GetOrganizationSuccess struct {
	// Organization
	Organization Organization `json:"organization"`
}

// Organization 一覧の成功レスポンス
type ListOrganizationsSuccess struct {
	// Organization の配列
	Organizations []Organization `json:"organizations"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ヘルスチェック
	// (GET /healthcheck)
	Healthcheck(ctx echo.Context) error
	// Organization 一覧
	// (GET /organizations)
	ListOrganizations(ctx echo.Context) error
	// Organization 取得
	// (GET /organizations/{organizationId})
	GetOrganization(ctx echo.Context, organizationId OrganizationId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Healthcheck converts echo context to params.
func (w *ServerInterfaceWrapper) Healthcheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthcheck(ctx)
	return err
}

// ListOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) ListOrganizations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListOrganizations(ctx)
	return err
}

// GetOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId OrganizationId

	err = runtime.BindStyledParameterWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrganization(ctx, organizationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/healthcheck", wrapper.Healthcheck)
	router.GET(baseURL+"/organizations", wrapper.ListOrganizations)
	router.GET(baseURL+"/organizations/:organizationId", wrapper.GetOrganization)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXT2/cRBT/KqsHRzd20w2kvqG2tJGgrdRwivYweCdrb2zPdGYcuo0s1TZFKekqaQ6k",
	"HFCLhBoIKBUCJCL+fJmpq/At0Ni73l17/yWAUG8z3nlvfn/mvZndAot4lPjYFxzMLaCIIQ8LzLIZYS3k",
	"O/eRcIi/0lRfmphbzKHqA5hwa+j32spV0MBRnykSNmjgIw+DWU6iAcN3A4fhJpiCBVgDbtnYQyq76FAV",
	"wQVz/BaEYagWc0p8jjM81xhb8QVmPnLV1CK+wL5QQ0Sp61jZHnqbK3BbQ3kpIxQz4eRZMGOEqcHbDK+D",
	"CW/pAw30PIjr19Siq0NsczB95Gu9LA2tD5p83MaWyEGPqiTjX2Tyu0z2ZPytTL5T4+g4ff5zurcto2OZ",
	"/CDjE5l8JZOfZHwCoaZo3iTifRL4zTeJZnIk4z8Uu/hERo9PX+zI6BsZ7cj4kYyOZPTpDMof+SgQNmHO",
	"ffwm0T496qa7L2V0KKNuzjMT4qUyW5HclvF+unsgoyevfnsqoycyejZNiOtYDFfVncCyMOdz6IHvIY+6",
	"uQavt/fSz5+p0SZyA1wuZTV3mmCCZTlLxmXG3iFLbXfRJovty8agcL1OcCGTRpEeyD2lBaS7X6R/Hsjo",
	"OAdQpqeVrCpjmubY8D4Vt0YSzWPaWVCHGnzg8BFX+H9iCwdz7UzGNOZ35tWvD05fHJ7LGT4jtYyO/3rY",
	"TbcPVPsX2ONns7JwCzGGOlOt5Wf3dgbvgX79+2W0LVSYFy38dfIwff4jaCAc4SpAldgyVA3uXRg6DaGa",
	"c0Go67RsUZTkxjptbyyv48Cwm/UM361SlUxmW7HRmevOLt26/WM2y/R0r5s+6lbjSwY6zf7BbQzEKqE+",
	"j1Dr9cU2ebdT79wN2p/0mpTjr5N+TSIrW9srmQ87AfFrVwijC1A5MddJ7cbq6u3aHcw2MautYo+6SODa",
	"e7dXhgyevmoTM55nMxaMhYtqE0Kxj6gDJlxaMBYuKXeQsDNjdBsjV9iWja0NNW9hMeasJU9l8n12XiMZ",
	"H8okya6V/dOvH8voM/kghmwPVjzP4MZQ1tLTadGoV3e4SWpXeu0r1KBuXJxUukUqvXxRhxosGcZcccXT",
	"Lau6wPMQ60yiqXRHLdURQfSEhoaK0yutaax2o4c13u/3gS9lvDNOuUqHr+o3B8mJ98T/p+6YbjintvrW",
	"6Ms9nFvs/oU6SezSG+dcUk94J/0Doet5hcyMK57m/7I5uWrjzdFG/pitjd9xsEQv/ecKM3t51rjy+FED",
	"XWIh1yZc9d6AuWCCLQQ1db34wVw2lg0IGwW6orMWKMNG+HcAAAD//9aWlzpODgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
