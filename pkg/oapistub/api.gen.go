// Package oapistub provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package oapistub

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// エラー情報
type ErrorDescription map[string]interface{}

// Message defines model for Message.
type Message struct {
	CreatedAt time.Time `json:"created_at"`
	Id        int64     `json:"id"`
	Message   string    `json:"message"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// NewMessage defines model for NewMessage.
type NewMessage struct {
	Message string `json:"message"`
	Name    string `json:"name"`
}

// CreateMessagesSuccess defines model for CreateMessagesSuccess.
type CreateMessagesSuccess struct {
	Id int64 `json:"id"`
}

// ErrInternal defines model for ErrInternal.
type ErrInternal struct {
	// エラー情報
	Error ErrorDescription `json:"error"`
}

// Message 一覧の成功レスポンス
type GetMessagesSuccess struct {
	// Message の配列
	Messages []Message `json:"messages"`
}

// CreateMessageJSONBody defines parameters for CreateMessage.
type CreateMessageJSONBody NewMessage

// CreateMessageJSONRequestBody defines body for CreateMessage for application/json ContentType.
type CreateMessageJSONRequestBody CreateMessageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ヘルスチェック
	// (GET /healthcheck)
	Healthcheck(ctx echo.Context) error
	// Get all messages
	// (GET /messages)
	GetMessages(ctx echo.Context) error
	// Create a new message
	// (POST /messages)
	CreateMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Healthcheck converts echo context to params.
func (w *ServerInterfaceWrapper) Healthcheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthcheck(ctx)
	return err
}

// GetMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetMessages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMessages(ctx)
	return err
}

// CreateMessage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMessage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/healthcheck", wrapper.Healthcheck)
	router.GET(baseURL+"/messages", wrapper.GetMessages)
	router.POST(baseURL+"/messages", wrapper.CreateMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RW72vkRBj+V8KrH3ObnFel5JvWo9cPdxxcv8kiY/LuJm0yM87M3t1yBG4TKqUoFEH0",
	"i1i/2IqyIipYEPxjxq31v5BJsml2k+2P2y9lppl553meeZ539hX4LOGMIlUSvFcgUHJGJRaTLYFE4WOU",
	"kgxRPhv5Psrig8+oQqrMkHAeRz5REaPOnmTU/E/6ISbEjLhgHIWKynpRYP4OmEiIAg8iqt7bABvUmGM5",
	"xSEKSFMbBH46igQG4H1kdvXrReyTPfQVpGZRgNIXETdHgwcVTOvi6Kt/z/6+ODyeHX2n8591dq7zb3X+",
	"m87OIbXhoRA7VKGgJF6DCQrBhBm8LXAAHrzlXMnolJuk89As+rABcplZWeU25HT2h87/0vmxzs50/qMZ",
	"T6azk99nx4d6Mu2guY1qnXvrlvafP19f/nCqJ9Nude0lkZIKwOqCejL97+CL2eHXYEOkMJE3SVptNAwr",
	"zYgQZNxStj76Ls65gZ7ZWOEwMFu322JZ39VFfjA7+dU4PVKxwdLau4zShpf38CVJeFzIl5q5VIzH0TBU",
	"8yjB/oDv7W8OcOSGwUaBb65Py7B+EeXgY6IWIhgQhfdUlOAVAqlERIdG4VvG1Z6rbVa3ilCSdH8Y8eCO",
	"iNp9oSp/hcBuEl04o20EG57gi5WCvQGnJXxL0LqdGNEBmyeT+IUUZXV4PB4xam0xwXvQsuw2sx7t7j61",
	"nqF4jsLaxYTHRKH1/tOdhs2uX/UchSyruT23d98cwjhSwiPw4EHP7T0wiSYqLPRwQiSxCv0Q/X0zH6Lq",
	"cHz+jc5/KlIz0dmpznOd/aKzLy+//1xPPtOvMyjOEEXb2TEWftSoai++Pu+4G+0TnjBrq2piqQ3vuu6q",
	"jlGXcpodv8jwKEmIGK+Ca/QjQ2luUFWCQd/sc5r9rKK/SKbRdNtkboG0o2mvT3IblUXi2KrRpzZwJjvg",
	"Lzz3UJoZpfqABeM7PR7XNfBG5NK0TMyCSvdvptr9q2R9ocq6FrEovpirVYZUFvkxlli2Y8x8EodGTRtG",
	"IgYPQqW45zj1B2/T3XQh7deuqgNeuyvtp/8HAAD//7eV0NaHCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
