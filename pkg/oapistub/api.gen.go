// Package oapistub provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package oapistub

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// エラー情報
type ErrorDescription map[string]interface{}

// Message defines model for Message.
type Message struct {
	CreatedAt time.Time `json:"created_at"`
	Id        int64     `json:"id"`
	Message   string    `json:"message"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// NewMessage defines model for NewMessage.
type NewMessage struct {
	Message string `json:"message"`
	Name    string `json:"name"`
}

// Organization
type Organization struct {
	// Organization ID
	Id string `json:"id"`

	// Organization の名前
	Name string `json:"name"`
}

// OrganizationId defines model for organizationId.
type OrganizationId string

// CreateMessagesSuccess defines model for CreateMessagesSuccess.
type CreateMessagesSuccess map[string]interface{}

// ErrInternal defines model for ErrInternal.
type ErrInternal struct {
	// エラー情報
	Error ErrorDescription `json:"error"`
}

// ErrNotFound defines model for ErrNotFound.
type ErrNotFound struct {
	// エラー情報
	Error ErrorDescription `json:"error"`
}

// ErrUnauthorized defines model for ErrUnauthorized.
type ErrUnauthorized struct {
	// エラー情報
	Error ErrorDescription `json:"error"`
}

// Message 一覧の成功レスポンス
type GetMessagesSuccess struct {
	// Message の配列
	Messages []Message `json:"messages"`
}

// Organization 取得の成功レスポンス
type GetOrganizationSuccess struct {
	// Organization
	Organization Organization `json:"organization"`
}

// Organization 一覧の成功レスポンス
type ListOrganizationsSuccess struct {
	// Organization の配列
	Organizations []Organization `json:"organizations"`
}

// CreateMessageJSONBody defines parameters for CreateMessage.
type CreateMessageJSONBody NewMessage

// CreateMessageJSONRequestBody defines body for CreateMessage for application/json ContentType.
type CreateMessageJSONRequestBody CreateMessageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ヘルスチェック
	// (GET /healthcheck)
	Healthcheck(ctx echo.Context) error
	// Get all messages
	// (GET /messages)
	GetMessages(ctx echo.Context) error
	// Create a new message
	// (POST /messages)
	CreateMessage(ctx echo.Context) error
	// Organization 一覧
	// (GET /organizations)
	ListOrganizations(ctx echo.Context) error
	// Organization 取得
	// (GET /organizations/{organizationId})
	GetOrganization(ctx echo.Context, organizationId OrganizationId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Healthcheck converts echo context to params.
func (w *ServerInterfaceWrapper) Healthcheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthcheck(ctx)
	return err
}

// GetMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetMessages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMessages(ctx)
	return err
}

// CreateMessage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMessage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateMessage(ctx)
	return err
}

// ListOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) ListOrganizations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListOrganizations(ctx)
	return err
}

// GetOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId OrganizationId

	err = runtime.BindStyledParameterWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrganization(ctx, organizationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/healthcheck", wrapper.Healthcheck)
	router.GET(baseURL+"/messages", wrapper.GetMessages)
	router.POST(baseURL+"/messages", wrapper.CreateMessage)
	router.GET(baseURL+"/organizations", wrapper.ListOrganizations)
	router.GET(baseURL+"/organizations/:organizationId", wrapper.GetOrganization)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY3W7cRBR+FWvg0o3ddFvavYO0pJFoWqnhKlqhwTu79sb2uONx0m1kqbYpSptGSSNB",
	"ygVqkVBTAkqFAImIv4eZOoS3QGN7vf7bXW8Kino3tmfO+c73zTlzxutAwYaFTWRSGzTXgQUJNBBFJHrC",
	"pAtN7R6kGjYX2vxNG9kK0Sz+AjTBzcx3YeEqEIHGX1uQqkAEJjQQaBaNiICgO45GUBs0KXGQCGxFRQbk",
	"1mnf4itsSjSzC1zX5ZNtC5s2ivDMEQQpuoFsG3aRfdtRFGRHHxRsUmRSPoSWpWtK5E3q2RzmetkD/rSH",
	"FBp7yIeUGBeOH33x98u/jjd2wkfPWPAD849Y8DULfmL+EXBFcI2QBZMiYkJ9Kv8WwRYiVIvjQYRgwgfv",
	"EtQBTfCONFRDihfZ0jU+6WoGZEzLgMPlxEpLnBwc839hwe8s2GH+SxZ8x8feYfj853Bng3mH1WEuYvoh",
	"dsz22xRmcMD8P3h0/hHzHp+82GTet8zbZP5D5h0w77MJIX9sQoeqmGj30NsU9snBVrj9inn7zNuK44yI",
	"eMXF5kFuMH833N5j3pPXvz1l3hPmPRtHxDyib5Jp1Wn1+tf7Jy/2mXdYnVligUIjATDaIPMO/3mwFW7s",
	"8eJDkWFPIjxZyCNMGIWEwH6J99R1Heprhhezmq2a9ZlFd6Fh6TEVsXU+WoW6g4qlmj9rbdAEiqJdlK8Q",
	"cglf7OmzKp7tXZGHhdnoO+eiDcfjGSVcrsSH21+Gf+7VVq+IaZwsWT8lLXKG6ugxDWpXBB9pdk4V+3+R",
	"xQbN5amEadVXZsq8KsAaa3rqDMtLOSHN8kim1nZSwqX8RahLxbYUeXowHgcPwuc/AhFQjeocUGltEaoI",
	"7p7L7AaXP9sUW7rWVWmakisdq7dyuYMcWW03InyDglQ6P5So22l/AqPVHUwMPgJtSNE5qhloiGDQMImR",
	"j8xczaSXGsN5mklRFxE+0Rh6LRmJt2HFB8dqT4mooLbWHuzyIQIxG2jOR3k3iGARrY0k7BQxFfAVoFUB",
	"uFkoaqM3ZynrtFot9Ejo43M03NkKH25NoUBruLcLqE+zrzuN2R5+r9/o33F6a8mZopkdPCihUInmJhXu",
	"Rt/BpjCHiTUDSgk+j4XrS0u3hNuIrCIiLCHD0iFFwvu3FjL5OH7WKiJ2bE2ekWfOcyfYQia0NNAEF2bk",
	"mQtcHUjVSBhJRVCnqqIiZYU/dxGtKA3BUxZ8H5UXj/n7LAii3mr35JvHzPuc3fdB5IOktyVwPWO1cJOZ",
	"lRtlD4tYmEtOG1cEDfn8qEqbmpKK3aorgouyXGtden+JiqRjGJD0R4XJeYddfoABmhANWnydlO3QEtry",
	"JGTayDIJNZBWtKFnR848ogLUdSGN2hWBhe2KsHNX1eTSi2z6AW73p2qjxx20mVroli/LtditvlGfHcEx",
	"HgEKJlobsBxNkUotS2WS5quivzvoD75i/mZVipY6v1Pt0ZH949kRWdEljU7iHLfSev6PjVub7EGjPYrs",
	"wt3ntOWg6v70BkQ34lI8cV36I+Q/FidmrVocMfdDbrna43CKVPjX5kby2tEJGa/PC6hjBeoqr18icIgO",
	"mkCl1GpKUvqheVm+LAO3laJLj/AUpdty/w0AAP//rme7PEYUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
